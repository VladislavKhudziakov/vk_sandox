#version 450
#extension GL_KHR_vulkan_glsl : enable
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 256) in;

const int ANIM_PATH_TRANSLATION = 0;
const int ANIM_PATH_ROTATION = 1;
const int ANIM_PATH_SCALE = 2;
const float FLT_EPSILON = 1.192092896e-07f;

const int ANIM_INTERPOLATION_LINEAR = 0;
const int ANIM_INTERPOLATION_STEP = 1;
const int ANIM_PATH_CUBIC_SPLINE = 2;

layout(constant_id = 0) const uint ANIMATIONS_COUNT = 1;
layout(constant_id = 1) const uint NODES_COUNT = 5;
layout(constant_id = 2) const uint BATCH_SIZE = 1;


struct TRS
{
    vec3 translation;
    vec4 rotation;
    vec3 scale;
};

struct anim_key
{
    float ts;
    TRS trs;
};

struct anim_sampler
{
    anim_key node_keys[NODES_COUNT];
};

struct in_node
{
    ivec4 children;
};

layout(set = 0, binding = 0) readonly buffer anim_progression_data
{
    uvec4 progression[];
}
animation_progression;

layout(set = 0, binding = 1) readonly buffer animation_data
{
    uvec4 interpolations_avg_frame_duration;
    anim_sampler samplers[];
}
animations[ANIMATIONS_COUNT];

layout(set = 0, binding = 2) readonly buffer in_execution_order_data
{
    ivec4 indices[];
}
execution_order;

layout(set = 0, binding = 3) readonly buffer in_hierarchy_data
{
    ivec4 nodes_child_indices[];
}
in_hierarchy;

layout(set = 0, binding = 4) buffer out_hierarchy_data
{
    mat4 nodes[];
}
out_hierarchy[BATCH_SIZE];


mat3 mat3_cast(vec4 q)
{
    mat3 result = mat3(1);

    float qxx = (q.x * q.x);
    float qyy = (q.y * q.y);
    float qzz = (q.z * q.z);
    float qxz = (q.x * q.z);
    float qxy = (q.x * q.y);
    float qyz = (q.y * q.z);
    float qwx = (q.w * q.x);
    float qwy = (q.w * q.y);
    float qwz = (q.w * q.z);

    result[0][0] = float(1) - float(2) * (qyy + qzz);
    result[0][1] = float(2) * (qxy + qwz);
    result[0][2] = float(2) * (qxz - qwy);

    result[1][0] = float(2) * (qxy - qwz);
    result[1][1] = float(1) - float(2) * (qxx + qzz);
    result[1][2] = float(2) * (qyz + qwx);

    result[2][0] = float(2) * (qxz + qwy);
    result[2][1] = float(2) * (qyz - qwx);
    result[2][2] = float(1) - float(2) * (qxx + qyy);

    return result;
}

mat4 mat4_cast(vec4 q)
{
    mat3 m3_result = mat3_cast(q);
    mat4 actual_result = mat4(1);

    actual_result[0].xyz = m3_result[0];
    actual_result[1].xyz = m3_result[1];
    actual_result[2].xyz = m3_result[2];

    return actual_result;
}

void translate(vec3 t, out mat4 result)
{
    result[3].xyz = t;
    result[3].w = 1;
}

void scale(vec3 s, out mat4 result)
{
    result[0][0] *= s.x;
    result[1][1] *= s.y;
    result[2][2] *= s.z;
}

vec4 slerp(vec4 x, vec4 y, float a)
{
    //    x = x.wxyz;
    //    y = y.wxyz;

    vec4 z = y;

    float cosTheta = dot(x, y);

    // If cosTheta < 0, the interpolation will take the long way around the sphere.
    // To fix this, one quat must be negated.
    if (cosTheta < 0) {
        z = -y;
        cosTheta = -cosTheta;
    }

    // Perform a linear interpolation when cosTheta is close to 1 to avoid side effect of sin(angle) becoming a zero denominator
    if (cosTheta > 1.0f - FLT_EPSILON) {
        // Linear interpolation
        return vec4(
            mix(x.w, z.w, a),
            mix(x.x, z.x, a),
            mix(x.y, z.y, a),
            mix(x.z, z.z, a));
    } else {
        // Essential Mathematics, page 467
        float angle = acos(cosTheta);
        return (sin((1.0f - a) * angle) * x + sin(a * angle) * z) / sin(angle);
    }
}

vec4 quat_interpolate(vec4 q1, vec4 q2, float v, uint mode)
{
    if (mode == ANIM_INTERPOLATION_STEP) {
        return v < 1 ? q1 : q2;
    } else {
        return slerp(q1, q2, v);
    }
}

vec3 vec_interpolate(vec3 x, vec3 y, float v, uint mode)
{
    if (mode == ANIM_INTERPOLATION_STEP) {
        return v < 1 ? x : y;
    } else if (mode == ANIM_PATH_CUBIC_SPLINE) {
        return smoothstep(x, y, vec3(v));
    } else {
        return mix(x, y, v);
    }
}

void get_samplers(uint curr_animation, uint progression_ts_us, out uint curr_sampler, out uint next_sampler)
{
    uint avg_frame_duration_us = animations[curr_animation].interpolations_avg_frame_duration.w;
    uint samplers_length = animations[curr_animation].samplers.length();
    curr_sampler = min(uint(progression_ts_us / avg_frame_duration_us), samplers_length - 1);
    next_sampler = min(curr_sampler + 1, samplers_length - 1);
}

void calculate_key(uint curr_animation, uint node, uint progression_ts_us, out mat4 result)
{
    uint t_interpolation = max(animations[curr_animation].interpolations_avg_frame_duration[ANIM_PATH_TRANSLATION], 0);
    uint r_interpolation = max(animations[curr_animation].interpolations_avg_frame_duration[ANIM_PATH_ROTATION], 0);
    uint s_interpolation = max(animations[curr_animation].interpolations_avg_frame_duration[ANIM_PATH_SCALE], 0);

    float progression_ts_s = float(progression_ts_us) / 1e6;

    uint curr_sampler;
    uint next_sampler;

    get_samplers(curr_animation, progression_ts_us, curr_sampler, next_sampler);

    vec4 progression = (vec4(progression_ts_s) - animations[curr_animation].samplers[curr_sampler].node_keys[node].ts) / (animations[curr_animation].samplers[curr_sampler].node_keys[node].ts - animations[curr_animation].samplers[next_sampler].node_keys[node].ts);

    vec3 curr_translation = vec_interpolate(
        animations[curr_animation].samplers[curr_sampler].node_keys[node].trs.translation,
        animations[curr_animation].samplers[next_sampler].node_keys[node].trs.translation,
        progression[ANIM_PATH_TRANSLATION],
        t_interpolation);

    vec3 curr_scale = vec_interpolate(
        animations[curr_animation].samplers[curr_sampler].node_keys[node].trs.scale,
        animations[curr_animation].samplers[next_sampler].node_keys[node].trs.scale,
        progression[ANIM_PATH_SCALE],
        s_interpolation);

    vec4 curr_rotation = quat_interpolate(
        animations[curr_animation].samplers[curr_sampler].node_keys[node].trs.rotation,
        animations[curr_animation].samplers[next_sampler].node_keys[node].trs.rotation,
        progression[ANIM_PATH_ROTATION],
        r_interpolation);

    result = mat4(1);
    translate(curr_translation, result);
    result = result * mat4_cast(curr_rotation);
    scale(curr_scale, result);
}

void calculcate_local_keys()
{
    uvec4 curr_progression = animation_progression.progression[gl_GlobalInvocationID.x];

    uint curr_animation = curr_progression.x;
    uint curr_time_us = curr_progression.y;
    uint mesh_instance_index = curr_progression.z;

    for (uint i = 0; i < NODES_COUNT; ++i) {
        calculate_key(curr_animation, i, curr_time_us, out_hierarchy[mesh_instance_index].nodes[i]);
    }
}

void update_hierarchy()
{
    // x - start_index, y - start_offset,  z - count
    uvec4 curr_progression = animation_progression.progression[gl_GlobalInvocationID.x];
    uint mesh_instance_index = curr_progression.z;

    for (uint i = 0; i < execution_order.indices.length(); ++i) {
        for (uint j = 0; j < 4; ++j) {
            uint node = execution_order.indices[i][j];

            uint children_offset = in_hierarchy.nodes_child_indices[node].x;
            uint pack_start_index = in_hierarchy.nodes_child_indices[node].y;
            uint children_count = in_hierarchy.nodes_child_indices[node].z;

            for (uint node_child = 0, pack_index = pack_start_index; node_child < children_count; node_child++, pack_index = (pack_index + 1) % 4) {
                uint child = in_hierarchy.nodes_child_indices[NODES_COUNT + children_offset][pack_index];
               // out_hierarchy[mesh_instance_index].nodes[child] =
                    // out_hierarchy[mesh_instance_index].nodes[node] * out_hierarchy[mesh_instance_index].nodes[child];
            }
        }
    }
}

void main()
{
    if (gl_GlobalInvocationID.x >= animation_progression.progression.length()) {
        return;
    }

    calculcate_local_keys();
    update_hierarchy();
}